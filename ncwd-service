#!/usr/bin/env bash

################################################################################
#title           :nordcloud-watchdog
#description     :Custom watchdog functionality implemented for Nordcloud
#author		       :Csaba SARI <scsaba314@gmail.com>
#date            :20170925
#version         :0.1
#usage		       :nordcloud-watchdog
#notes           :Install Vim and Emacs to use this script.
#source          :Taken from https://gist.github.com/shawnrice/11076762
#bash_version    :4.3-14ubuntu1.2
################################################################################

################################################################################
# Default Configuration
################################################################################

# Daemon name
daemonName="nordcloud-watchdog"

# PID settings
pidDir="./pid"
pidFile="${pidDir}/${daemonName}.pid"

# LOG settings
logDir="./log"
logFile="${logDir}/${daemonName}-"$(date +'%Y-%m-%d')".log"
logMaxSize=1024       # In Kbytes

# TMP settings
tmpDir="./tmp"

# Config directory settings for services
configDir="./conf.d"

# Daemon running interval
runInterval=60        # In seconds

################################################################################
# Static variables
################################################################################

# Config file location
configFile="./ncwd.conf"

# Scheduler location
schedulerDir="./lib"
schedulerFile="./lib/scheduler.sh"

# DOCS location
docsDir="./docs"

# Colors
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
WHITE="\e[39m"

################################################################################
# Do not edit below
################################################################################

# Reading config from file to overwrite defaults
source ${configFile}

# Reading scheduler and other functions
source ${schedulerFile}

myPid=$(echo $$)

doCommands() {
  scheduler
}

setupDaemon() {
  # Make sure that the directories work.
  if [[ ! -d "${configDir}" ]]; then
    mkdir -p "${configDir}"
  fi
  if [[ ! -d "${pidDir}" ]]; then
    mkdir -p "${pidDir}"
  fi
  if [[ ! -d "${logDir}" ]]; then
    mkdir "${logDir}"
  fi
  if [[ ! -f "${logFile}" ]]; then
    touch "${logFile}"
  else
    # Check to see if we need to rotate the logs.
    size=$((`ls -l "${logFile}" | cut -d " " -f 8`/1024))
    if [[ ${size} -gt ${logMaxSize} ]]; then
      mv ${logFile} "${logFile}.old"
      touch "${logFile}"
    fi
  fi

  # Checking for valid configuration only
  if [[ $(configCheck) -eq 1 ]]; then
    echo -e "\n${RED}Configuration error${WHITE}: please check service configurations.\n"
    exit 1
  fi

  # Create running config to the tmp folder from the conf.d service files
  initConfig

}

startDaemon() {
  # Start the daemon.
  setupDaemon # Make sure the directories are there.
  if [[ $(checkDaemon) -eq 1 ]]; then
    echo -e " * ${RED}Error${WHITE}: ${daemonName} is already running."
    exit 1
  fi
  echo -e " * ${YELLOW}Starting${WHITE} ${daemonName} with PID: ${myPid}."
  echo -e "${myPid}" > "${pidFile}"
  log "*** $(date +'%Y-%m-%d'): Starting up ${daemonName}."

  # Start the loop.
  loop
}

stopDaemon() {
  # Stop the daemon.
  if [[ $(checkDaemon) -eq 0 ]]; then
    echo -e " * ${RED}Error${WHITE}: ${daemonName} is not running."
    exit 1
  fi
  echo -e " * ${YELLOW}Stopping ${daemonName} ${WHITE}"
  log "*** $(date +'%Y-%m-%d'): ${daemonName} stopped."

  if [[ ! -z $(cat ${pidFile}) ]]; then
    kill -9 $(cat ${pidFile}) &> /dev/null
  fi

  rm -rf ${tmpDir}/* --preserve-root
}

statusDaemon() {
  # Query and return whether the daemon is running.
  if [[ $(checkDaemon) -eq 1 ]]; then
    echo -e "\n ${GREEN}* ${daemonName} is running.${WHITE} \n"
  else
    echo -e "\n ${RED}* ${daemonName} isn't running.${WHITE} \n"
  fi
  exit 0
}

restartDaemon() {
  # Restart the daemon.
  if [[ $(checkDaemon) -eq 0 ]]; then
    # Can't restart it if it isn't running.
    echo -e " ${RED}${daemonName} isn't running.${WHITE}"
    exit 1
  fi
  stopDaemon
  startDaemon
}

checkDaemon() {
  # Check to see if the daemon is running.
  if [[ -z "${oldPid}" ]]; then
    return 0
  elif [[ $(ps aux | grep "${oldPid}" | grep -v grep) > /dev/null ]]; then
    if [[ -f "${pidFile}" ]]; then
      if [[ $(cat "${pidFile}") == "${oldPid}" ]]; then
        # Daemon is running.
        return 1
      else
        # Daemon isn't running.
        return 0
      fi
    fi
  elif [[ $(ps aux | grep "$daemonName" | grep -v grep | grep -v "$myPid" | grep -v "0:00.00") > /dev/null ]]; then
    # Daemon is running but without the correct PID. Restart it.
    log "*** $(date +'%Y-%m-%d'): ${daemonName} running with invalid PID; restarting."
    restartDaemon
    return 1
  else
    # Daemon not running.
    return 0
  fi
  return 1
}

configCheck() {
  # TODO: I would parse the service definitions for executables, and validate
  # them against what exists currently. If a check cannot be performed I would
  # drop an error message (for example curl for http checks) and then exit
  # the daemon
  log "*** $(date +'%Y-%m-%d'): Checking config"
}

addService() {
  # TODO: Basic READ functions whith the given parameters like:
  # service name, service description, check type (http, pid, socket, tcp)
  # check period (s), restart action, restart numbers, restart interval
  # notification email
  log "*** $(date +'%Y-%m-%d'): $1 Service added"
}

removeService() {
  # TODO: Basic READ functions for an existing service. Delete the file from
  # the conf.d directory after that
  log "*** $(date +'%Y-%m-%d'): $1 Service removed"
}

usage() {
  # TODO: cat the content of the docs.txt file in the docs folder. Second param
  # could be a specific command, and cat the specific file from there
  cat ${docsDir}/usage.txt
}

loop() {
  # This is the loop.
  now=$(date +%s)

  if [[ -z ${last} ]]; then
    last=$(date +%s)
  fi

  # Do everything you need the daemon to do.
  doCommands

  # Check to see how long we actually need to sleep for. If we want this to run
  # once a minute and it's taken more than a minute, then we should just run it
  # anyway.
  last=$(date +%s)

  # Set the sleep interval
  if [[ ! $((now-last+runInterval+1)) -lt $((runInterval)) ]]; then
    sleep $((now-last+runInterval))
  fi

  # Startover
  loop
}

initConfig() {
  # TODO: Create a config file in tmp with restructuring the service files
  # from conf.d folder. Line by line a single service and it's full definitions
  # this will be parsed by the scheduler
  log "*** $(date +'%Y-%m-%d'): Initializing config"
}

log() {
  # Generic log function.
  echo "$1" >> "$logFile"
}

################################################################################
# Main
################################################################################

if [[ -f "${pidFile}" ]]; then
  oldPid=$(cat "${pidFile}")
fi
checkDaemon

case "$1" in
  start)
    startDaemon
    ;;
  stop)
    stopDaemon
    ;;
  status)
    statusDaemon
    ;;
  restart)
    restartDaemon
    ;;
  usage)
    usage
    ;;
  configcheck)
    configCheck
    ;;
  add-service)
    addService
    ;;
  remove-service)
    removeService
    ;;
  *)
  echo -e "\n${RED}Error${WHITE}: usage $0 { start | stop | restart | status | configcheck | add-service | remove-service | usage }\n"
  exit 1
esac

exit 0
